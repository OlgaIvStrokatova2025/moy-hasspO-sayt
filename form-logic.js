// form-logic.js - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –•–ê–°–°–ü –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–≥–æ–≤
const STEPS_CONFIG = [
    {
        id: 1,
        title: "–ë–ª–æ–∫ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è",
        subtitle: "–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ~5 –º–∏–Ω—É—Ç",
        fields: ['businessName', 'legalForm', 'inn', 'phone', 'legalAddress', 'directorName', 'directorPosition', 'businessEmail', 'haccpResponsible']
    },
    {
        id: 2,
        title: "–ë–ª–æ–∫ 2: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è",
        subtitle: "–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ~10 –º–∏–Ω—É—Ç", 
        fields: ['businessType', 'seatingCapacity', 'kitchenArea', 'staffCount', 'workSchedule', 'workDays', 'additionalServices']
    },
    {
        id: 3,
        title: "–ë–ª–æ–∫ 3: –ö—É—Ö–Ω—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã",
        subtitle: "–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ~10 –º–∏–Ω—É—Ç",
        fields: ['productionType', 'cuisineSpecialization', 'kitchenLayout', 'productionZones', 'dishwareType']
    },
    {
        id: 4,
        title: "–ë–ª–æ–∫ 4: –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", 
        subtitle: "–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ~10 –º–∏–Ω—É—Ç",
        fields: ['heatingEquipment', 'refrigerationEquipment', 'mechanicalEquipment', 'washingEquipment', 'additionalEquipment', 'equipmentMaintenance', 'controlInstruments', 'utilities']
    },
    {
        id: 5,
        title: "–ë–ª–æ–∫ 5: –£–±–æ—Ä–∫–∞ –∏ —Å–∞–Ω–∏—Ç–∞—Ä–∏—è",
        subtitle: "–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ~5 –º–∏–Ω—É—Ç",
        fields: ['cleaningOrganization', 'cleaningSupplies', 'cleaningInventory']
    },
    {
        id: 6,
        title: "–ë–ª–æ–∫ 6: –ú–µ–Ω—é –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã",
        subtitle: "–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ~10 –º–∏–Ω—É—Ç", 
        fields: ['technicalCards', 'menuCategories', 'cookingFeatures']
    },
    {
        id: 7,
        title: "–ë–ª–æ–∫ 7: –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞",
        subtitle: "–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ~5 –º–∏–Ω—É—Ç",
        fields: ['suppliersCount', 'deliverySchedule', 'goodsAcceptance', 'documentation']
    },
    {
        id: 8,
        title: "–ë–ª–æ–∫ 8: –ü–µ—Ä—Å–æ–Ω–∞–ª",
        subtitle: "–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ~5 –º–∏–Ω—É—Ç",
        fields: ['staffStructure', 'medicalBooks', 'staffTraining', 'staffTurnover']
    }
];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentStep = 1;
let formData = {};
let validationErrors = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
function initFormLogic() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ —Ñ–æ—Ä–º—ã...');
    
    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadSavedData();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupFormEventListeners();
}

function setupFormEventListeners() {
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
    document.addEventListener('input', debounce(autoSaveFormData, 1000));
    document.addEventListener('change', autoSaveFormData);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    document.addEventListener('blur', validateFieldOnBlur, true);
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function startForm() {
    document.getElementById('welcome').classList.add('hidden');
    document.getElementById('form').classList.remove('hidden');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (Object.keys(formData).length > 0) {
        showRestoreDataModal();
    } else {
        showStep(1);
    }
}

function showStep(step) {
    if (step < 1 || step > 8) return;
    
    currentStep = step;
    updateStepIndicator();
    updateProgressBar();
    updateStepHeader();
    loadStepContent(step);
    updateNavigationButtons();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    history.pushState({step: step}, '', `#step-${step}`);
    
    // –°–∫—Ä–æ–ª–ª–∏–º –∫ –Ω–∞—á–∞–ª—É —Ñ–æ—Ä–º—ã
    document.querySelector('.card').scrollIntoView({behavior: 'smooth'});
}

function nextStep() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    saveCurrentStepData();
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
    if (!validateCurrentStep()) {
        showValidationErrors();
        return;
    }
    
    if (currentStep < 8) {
        showStep(currentStep + 1);
    } else {
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        if (validateAllSteps()) {
            generateDocuments();
        } else {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ', 'error');
        }
    }
}

function prevStep() {
    if (currentStep > 1) {
        saveCurrentStepData();
        showStep(currentStep - 1);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateStepIndicator() {
    for (let i = 1; i <= 8; i++) {
        const stepEl = document.getElementById(`step-${i}`);
        if (!stepEl) continue;
        
        stepEl.classList.remove('active', 'completed');
        
        if (i < currentStep) {
            stepEl.classList.add('completed');
        } else if (i === currentStep) {
            stepEl.classList.add('active');
        }
    }
}

function updateProgressBar() {
    const progress = (currentStep / 8) * 100;
    const progressFill = document.getElementById('progressFill');
    if (progressFill) {
        progressFill.style.width = progress + '%';
    }
}

function updateStepHeader() {
    const stepConfig = STEPS_CONFIG[currentStep - 1];
    const titleEl = document.getElementById('stepTitle');
    const subtitleEl = document.getElementById('stepSubtitle');
    
    if (titleEl) titleEl.textContent = stepConfig.title;
    if (subtitleEl) subtitleEl.textContent = stepConfig.subtitle;
}

function updateNavigationButtons() {
    const backBtn = document.getElementById('backBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    if (backBtn) {
        backBtn.style.display = currentStep === 1 ? 'none' : 'block';
    }
    
    if (nextBtn) {
        nextBtn.textContent = currentStep === 8 ? 'üéØ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –•–ê–°–°–ü' : '–î–∞–ª–µ–µ ‚Üí';
    }
}

// –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã
function saveCurrentStepData() {
    const stepContainer = document.getElementById('stepContent');
    if (!stepContainer) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
    const inputs = stepContainer.querySelectorAll('input, select, textarea');
    inputs.forEach(input => {
        if (input.type === 'checkbox') {
            formData[input.id] = input.checked;
        } else if (input.type === 'radio') {
            if (input.checked) {
                formData[input.name] = input.value;
            }
        } else {
            formData[input.id] = input.value;
        }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    const activeButtons = stepContainer.querySelectorAll('.btn-secondary.active');
    activeButtons.forEach(button => {
        const fieldName = button.getAttribute('data-field');
        const value = button.getAttribute('data-value');
        if (fieldName && value) {
            if (button.getAttribute('data-multiple') === 'true') {
                if (!formData[fieldName]) formData[fieldName] = [];
                if (!formData[fieldName].includes(value)) {
                    formData[fieldName].push(value);
                }
            } else {
                formData[fieldName] = value;
            }
        }
    });
    
    console.log('–î–∞–Ω–Ω—ã–µ —à–∞–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', formData);
}

function restoreStepData(step) {
    const stepContainer = document.getElementById('stepContent');
    if (!stepContainer) return;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
    const inputs = stepContainer.querySelectorAll('input, select, textarea');
    inputs.forEach(input => {
        if (formData[input.id] !== undefined) {
            if (input.type === 'checkbox') {
                input.checked = formData[input.id];
            } else if (input.type === 'radio') {
                input.checked = formData[input.name] === input.value;
            } else {
                input.value = formData[input.id];
            }
        }
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    const buttons = stepContainer.querySelectorAll('.btn-secondary[data-field]');
    buttons.forEach(button => {
        const fieldName = button.getAttribute('data-field');
        const value = button.getAttribute('data-value');
        const isMultiple = button.getAttribute('data-multiple') === 'true';
        
        if (fieldName && value && formData[fieldName] !== undefined) {
            if (isMultiple) {
                if (Array.isArray(formData[fieldName]) && formData[fieldName].includes(value)) {
                    button.classList.add('active');
                }
            } else {
                if (formData[fieldName] === value) {
                    button.classList.add('active');
                }
            }
        }
    });
}

function autoSaveFormData() {
    saveCurrentStepData();
    try {
        localStorage.setItem('haccpFormData', JSON.stringify(formData));
        localStorage.setItem('haccpCurrentStep', currentStep.toString());
    } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:', e);
    }
}

function loadSavedData() {
    try {
        const savedData = localStorage.getItem('haccpFormData');
        const savedStep = localStorage.getItem('haccpCurrentStep');
        
        if (savedData) {
            formData = JSON.parse(savedData);
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', formData);
        }
        
        if (savedStep) {
            currentStep = parseInt(savedStep);
        }
        
        return Object.keys(formData).length > 0;
    } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', e);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ü–∏—è–º–∏
function selectOption(field, value, button) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ –≥—Ä—É–ø–ø–µ
    const group = button.parentElement;
    group.querySelectorAll('.btn-secondary').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ
    button.classList.add('active');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    formData[field] = value;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    button.setAttribute('data-field', field);
    button.setAttribute('data-value', value);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    handleSpecialCases(field, value);
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    autoSaveFormData();
}

function toggleOption(field, value, button) {
    if (!formData[field]) formData[field] = [];
    
    const index = formData[field].indexOf(value);
    if (index > -1) {
        formData[field].splice(index, 1);
        button.classList.remove('active');
    } else {
        formData[field].push(value);
        button.classList.add('active');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    button.setAttribute('data-field', field);
    button.setAttribute('data-value', value);
    button.setAttribute('data-multiple', 'true');
    
    autoSaveFormData();
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
function handleSpecialCases(field, value) {
    switch (field) {
        case 'haccpResponsible':
            const otherResponsibleDiv = document.getElementById('otherResponsible');
            if (otherResponsibleDiv) {
                if (value === 'other') {
                    otherResponsibleDiv.classList.remove('hidden');
                } else {
                    otherResponsibleDiv.classList.add('hidden');
                }
            }
            break;
            
        case 'businessType':
            updateBusinessTypeHints(value);
            break;
            
        case 'productionType':
            updateProductionTypeHints(value);
            break;
    }
}

function updateBusinessTypeHints(type) {
    const hints = {
        'coffeehouse': '–î–ª—è –∫–æ—Ñ–µ–µ–Ω –¥–æ–±–∞–≤–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ—Ñ–µ, –º–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è –∫–æ—Ñ–µ–º–∞—à–∏–Ω',
        'delivery': '–î–æ–±–∞–≤–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É–ø–∞–∫–æ–≤–∫–µ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ',
        'bar': '–î–æ–±–∞–≤–∏–º –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤'
    };
    
    if (hints[type]) {
        showHint(hints[type]);
    }
}

function updateProductionTypeHints(type) {
    const hints = {
        'semi': '–û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É –•–ê–°–°–ü ‚Äî –º–Ω–æ–≥–∏–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è',
        'full': '–î–æ–±–∞–≤–∏–º –≤—Å–µ —ç—Ç–∞–ø—ã: –æ—Ç –ø—Ä–∏–µ–º–∫–∏ —Å—ã—Ä—å—è –¥–æ –ø–æ–¥–∞—á–∏ –≥–æ—Ç–æ–≤—ã—Ö –±–ª—é–¥. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π',
        'ready': '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –ø—Ä–∏–µ–º–∫–∏, —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏'
    };
    
    if (hints[type]) {
        showHint(hints[type]);
    }
}

function showHint(message) {
    const hintEl = document.createElement('div');
    hintEl.className = 'hint';
    hintEl.innerHTML = `üí° <strong>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> ${message}`;
    
    const stepContent = document.getElementById('stepContent');
    if (stepContent) {
        stepContent.appendChild(hintEl);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (hintEl.parentElement) {
                hintEl.remove();
            }
        }, 10000);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥—Ä–µ—Å–∞–º–∏
function toggleSameAddress() {
    const checkbox = document.getElementById('sameAddress');
    const actualAddressInput = document.getElementById('actualAddress');
    const legalAddressInput = document.getElementById('legalAddress');
    
    if (checkbox && checkbox.checked && legalAddressInput) {
        if (actualAddressInput) {
            actualAddressInput.value = legalAddressInput.value;
            actualAddressInput.disabled = true;
        }
    } else if (actualAddressInput) {
        actualAddressInput.disabled = false;
    }
}

// –£—Ç–∏–ª–∏—Ç—ã
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function showRestoreDataModal() {
    const modalContent = `
        <h3>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?</h3>
        <p>–ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?</p>
        <div style="margin-top: 20px; text-align: center;">
            <button class="btn btn-primary" onclick="continueFromSaved()">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ</button>
            <button class="btn btn-secondary" onclick="startFresh()">–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
        </div>
    `;
    showModal(modalContent);
}

function continueFromSaved() {
    closeModal();
    showStep(currentStep);
}

function startFresh() {
    formData = {};
    currentStep = 1;
    localStorage.removeItem('haccpFormData');
    localStorage.removeItem('haccpCurrentStep');
    closeModal();
    showStep(1);
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.startForm = startForm;
window.nextStep = nextStep;
window.prevStep = prevStep;
window.selectOption = selectOption;
window.toggleOption = toggleOption;
window.toggleSameAddress = toggleSameAddress;
window.continueFromSaved = continueFromSaved;
window.startFresh = startFresh;
function loadStepContent(step) {
    const stepContentEl = document.getElementById('stepContent');
    if (!stepContentEl) return;
    
    let content = '';
    
    // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    switch(step) {
        case 1:
            content = typeof generateStep1Content === 'function' ? generateStep1Content() : '<p>–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</p>';
            break;
        case 2:
            content = typeof generateStep2Content === 'function' ? generateStep2Content() : '<p>–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</p>';
            break;
        case 3:
            content = typeof generateStep3Content === 'function' ? generateStep3Content() : '<p>–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</p>';
            break;
        case 4:
            content = typeof generateStep4Content === 'function' ? generateStep4Content() : '<p>–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</p>';
            break;
        case 5:
            content = typeof generateStep5Content === 'function' ? generateStep5Content() : '<p>–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</p>';
            break;
        case 6:
            content = typeof generateStep6Content === 'function' ? generateStep6Content() : '<p>–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</p>';
            break;
        case 7:
            content = typeof generateStep7Content === 'function' ? generateStep7Content() : '<p>–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</p>';
            break;
        case 8:
            content = typeof generateStep8Content === 'function' ? generateStep8Content() : '<p>–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</p>';
            break;
        default:
            content = '<p>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥</p>';
    }
    
    stepContentEl.innerHTML = content;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    setTimeout(() => restoreStepData(step), 100);
}
